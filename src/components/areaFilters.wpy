<style lang="less">
  @import "../../assets/css/animation.wxss";
  @import "../../assets/css/main.wxss";
  @import "../../assets/css/icon.wxss";
  @import "../../assets/css/iconfont.wxss";

  .column {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .title {
    text-align: left;
  }

  .vertical-nav.nav {
    width: 250rpx;
    white-space: initial;
  }

</style>

<wxs module="m1" lang="babel">
  const suburbSelected = (selectedSuburbs, suburb) => {
    return (selectedSuburbs.indexOf(suburb) !== -1);
  }
  const stationsSelected = (selectedStations, station) => {
    return (selectedStations.indexOf(station) !== -1);
  }

  module.exports = {
    suburbSelected: suburbSelected,
    stationsSelected: stationsSelected
  }
</wxs>

<template>
  <div class="flex">
    <div class="vertical-nav nav bg-gray solid-right" scroll-y scroll-with-animation scroll-top="{{VerticalNavTop}}" style="height:calc(100vh - 500rpx); width: 150px">
      <div class="solid-bottom cu-item {{index==selectedTab?'text-blue cur':''}}" v-for="(item, index) in tabs" wx:key @tap="selectedTab=index" data-id="{{index}}">
        {{item.name}}
      </div>
    </div>
    <scroll-view class="bg-white solid-right" scroll-y="1" scroll-with-animation style="height:calc(100vh - 500rpx)">
      <block v-for="(item, index) in distanceArray" v-if="selectedTab==0">
        <div class="block bg-white padding-tb-sm solid-bottom" @tap="distance=index">
          <text>{{item}}</text>
          <span class="padding-left-sm cuIcon-check text-green" v-if="distance == index"/>
        </div>  
      </block>

      <block v-if="selectedTab==1">
        <div class="block bg-white padding-tb-sm solid-bottom" data-name="0" @tap="selectSuburb">
          <text>不限</text>
          <span class="padding-left-sm cuIcon-check text-green" v-if="m1.suburbSelected(selectedSuburbs, '0')"/>
        </div>
        <block v-for="(item, index) in suburbs">
          <div class="block bg-white padding-tb-sm solid-bottom" :data-name="item.name" @tap="selectSuburb">
            <text>{{item.name}}</text>
            <span class="padding-left-sm cuIcon-check text-green" v-if="m1.suburbSelected(selectedSuburbs, item.name)"/>
          </div>  
        </block>
      </block>

      <block v-if="selectedTab==2">
        <block v-for="(item, index) in subways">
          <div class="block bg-white padding-tb-sm solid-bottom" :data-name="item.name" :data-idx="index" @tap="setStations">
            <text>{{item.name}}</text>
            <span class="cuIcon-title text-green" v-if="subway===item.name"/>
          </div>  
        </block>
      </block>
    </scroll-view>
    <scroll-view scroll-y="1" v-if="selectedTab==2" style="height:calc(100vh - 500rpx)">
      <div class="block bg-white padding-tb-sm solid-bottom" data-name="0" @tap="selectStation">
        <text>不限</text>
        <span class="padding-left-sm cuIcon-check text-green" v-if="m1.stationsSelected(selectedStations, '0')"/>
      </div>
      <block v-for="(item, index) in stations">
        <div class="block bg-white padding-tb-sm solid-bottom" :data-name="item.name" @tap="selectStation">
          <text>{{item.name}}</text>
          <span class="padding-left-sm cuIcon-check text-green" v-if="m1.stationsSelected(selectedStations, item.name)"/>
        </div>  
      </block>
    </scroll-view>
  </div>
  <div class="flex justify-center padding-tb-sm bg-white">
    <div class="cu-btn bg-gradual-red block" style="width: 80%">
      重置
    </div>
  </div>

</template>

<script>
  import wepy from "@wepy/core";
  import eventHub from '../common/eventHub';
  import { fetchSuburbs, fetchSubways} from '../common/api';
  wepy.component({
    props: {
      region: {
        type: String,
        default: '北京市'
      }
    },
    data: {
      filterIndex: 0,
      distance: null,
      selectedTab: 1,
      subway: null,
      suburbs: [],
      subways:[],
      stations: null,
      selectedStations: [],
      selectedSuburbs: [],
      distanceArray: ['不限', '1km', '2km', '3km', '4km', '5km'],
      tabs: [
        {
          name: "附近"
        }, 
        {
          name: "商圈"
        },
        {
          name: "地铁"
        }
      ]
    },
    methods: {
      setStations(e) {
        this.subway = e.currentTarget.dataset.name;
        this.selectedStations = [];
        this.stations = this.subways[e.currentTarget.dataset.idx].stations;
      },
      selectSuburb(e) {
        let suburbsArray = this.selectedSuburbs
        let suburb = e.currentTarget.dataset.name
        if(suburbsArray.includes(suburb)) {
          suburbsArray = suburbsArray.filter(el => el !== suburb);
        } else {
          suburbsArray.push(suburb)
          if(suburb == "0"){
            suburbsArray = suburbsArray.filter(el => el === "0");
          } else {
            suburbsArray = suburbsArray.filter(el => el !== "0");
          }
        }
        this.selectedSuburbs = suburbsArray
      },

      selectStation(e) {
        let stationsArray = this.selectedStations
        let station = e.currentTarget.dataset.name
        if(stationsArray.includes(station)) {
          stationsArray = stationsArray.filter(el => el !== station);
        } else {
          stationsArray.push(station)
          if(station == "0"){
            stationsArray = stationsArray.filter(el => el === "0");
          } else {
            stationsArray = stationsArray.filter(el => el !== "0");
          }
        }
        this.selectedStations = stationsArray
      },

      tabSelect(e){
        this.filterIndex = e.currentTarget.dataset.id
      },

      syncFilters(region) {
        this.stations = []
        this.selectedSuburbs = [];
        fetchSuburbs(region).then(suburbs => {
          this.suburbs = suburbs
        })
        fetchSubways(region).then(subways=>{
          this.subways = subways;
          this.subway = subways[0].name
          this.stations = subways[0]["stations"]
        })  
      },

      regEvent() {
        eventHub.$on('select-city', (res)=> {
          this.syncFilters(res.city);
        });
        eventHub.$on('authencated', () => {
          this.syncFilters(this.region)
        });
      },
    },
    attached(){
      this.regEvent();
      this.syncFilters(this.region);
    }
  })
</script>
<config>
  {
    usingComponents: {
      activeBtn: "./activeBtn"
    }
  }
</config>
